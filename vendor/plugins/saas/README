== Welcome to the SaaS Rails Kit

This kit will help you get a quick start on building new web
applications that need a recurring billing component and have
multiple plan levels that are charged at varying rates. Typical
examples of this kind of Rails application are the services
offered by 37signals: Basecamp, Backpack, etc.

The kit comes configured to allow customers to create paid
accounts with a 1 month free trial without collecting payment
information. Emails are sent to remind customers when a trial
account is about to expire, when the plan level gets changed, when
payment is made, and when an account is canceled.

Though there is an active? method in Account, the method is not
used anywhere in the application. It's up to you to decide what to
do for accounts that are no longer active due to an expired trial
or a failed credit card charge. In my Catch the Best application,
I simply call that method in a before filter and render a template
directing the user to the enter billing information if that method
returns false.

== Getting Started

This code provides a complete, running Rails application. There is
one thing you need to do to get started, though. Run the following
rake command on the command line:

rake saas:bootstrap

This will create your database (by default the app is configured
to use MySQL), load some sample data, and create a config file for
you in config/saas.yml (which you should review).

Once that's done, you are ready to go. Start up the app and browse
to it in your web browser. Log in with the information that was
output during the rake task, and you'll be logged in as the admin
user for a test customer account.

== Deploying to a Production Server

This kit is designed to be served by a web server configured for
name-based virtual hosting. In my deployments, I point the
"default" configuration at the app so that traffic to any domain
name not explicitly set in my other virtual host sections gets
directed to the application.

For the "public" web site, where one typically has a welcome page,
tour, etc., you can add static page content to the views in
app/views/content. A catch-all route sends all requests to
/content/* to the ContentController, so
http://yoursite.com/content/about would be served from
app/views/content/about.html.erb.  

If you'd like to host your homepage separately (say you want to
host your main domain with Wordpress or something) you can create
a separate virtual host for www.yourdomain.com or yourdomain.com,
and forward all urls that begin with /signup to the Rails
application. You'll notice in config/routes.rb that the pricing
grid, account creation page, and sign-up thank-you page are all
served with urls that start with /signup. 

If the layout for your public site will differ from the layout of
the application, add a new layout to app/views/layouts and edit
app/controllers/accounts_controller.rb to change the new, plans,
and thanks actions to use that layout.

The application is written to allow all admins to update their
payment information while logged in to an account, which means
that SSL connections will be attempted for all the subdomains of
your base domain. Unless you want SSL certificate warnings for
your customers, then, you'll need to get a wildcard SSL
certificate. I use GoDaddy to purchase mine: currently $200 per
year. Of course you could rewrite the billing action in
app/controllers/accounts_controller.rb to redirect to a specific
subdomain to avoid the cost of a wildcard SSL cert... feel free to
do so. :)

Make sure you set up a cron job to run 'rake saas:run_billing' on a
daily basis. This script does the charging for account renewals
and sends notices of expiring trials.

== Integrating Into an Existing App

If you'd like to pull the billing functionality into your app that
you've already started, copy the plugins from vendor/plugins into
your existing app, and include the necessary gems from the Gemfile
in your Gemfile. Then run 'bundle install', 'rails generate saas',
and 'rake db:migrate' to get started.  

== PayPal

PayPal payments are handled via PayPal's recurring payment profiles,
which are a part of the Website Payments Standard plan. You don't
need to sign up for Website Payments Pro or PayFlow -- just the
basic business plan. There are a couple of caveats when using PayPal
in addition to or in place of a standard credit card gateway:
 - If you require payment information to create a trial account
   (not the default) you can't currently use PayPal as a payment
   option for that. Currently (and this is just a limitation of
   the Kit at present), PayPal info can only be collected for an
   existing account when changing billing information. If you
   allow trial accounts without collecting payment info first,
   this isn't an issue, since as soon as the account is created
   the user can then supply the billing info via PayPal.
 - You will need to enable API access in both your sandbox and
   live paypal accounts.
 - Your customers will be redirected to PayPal to collect billing
   information (of course), but they will also be redirected to
   PayPal when changing to a paid plan.  This is because a new
   recurring payment profile needs to be created with PayPal.  If a
   customer switches from a paid plan to a free plan, no redirect
   happens, as the existing recurring payment profile is simply
   destroyed behind the scenes.
 
== Known Issues

The Lockfile gem does not work on Windows, so you'll have problems
trying to run the daily_mailer script on Windows.  You can remove
the Lockfile code from that script if you really need to run on 
Windows and you can ensure there won't be two copies of that
script running at the same time.
 
== Contents

Hopefully you're familiar enough with the basics of Rails that I
don't have to explain what every file in this archive does. If
not, go read some books like Agile Web Development with Rails and
then come back here. With that out of the way, here are some of
the files you'll want to check out:

app/
  controllers/
    users_controller.rb - Here's an example of how you can use
    limits in your application. Notice the before filter to
    enforce the limit, and the call to inherit_resources to pull
    in generic RESTful methods. Also notice the
    begin_of_association_chain method, which is used to scope all
    the finds to the current account (the current_account method
    is defined in lib/subscription_system). Use this pattern
    throughout your application to make sure users only see the
    data associated with their account.

  models/
    account.rb - Near the top of the file you'll notice call to
    has_subscription, which is loads the saas plugin
    (vendor/plugins/saas) and sets up the various limits you'll be
    checking for plan eligibility and for being able to do various
    things in your app. For example, the user_limit entry in the
    hash checks the count of associated users, and is used to
    create the reached_user_limit? convenience method in the
    plugin.
    
    user.rb - Basic User model with some of Devise's functionality
    overridden to make the login scoped by account (so you can
    have one user with the same email address belonging to
    multiple accounts).
    
  views/
    accounts/ - Views for updating billing, creating a new
    account, etc. are here
    
    content/ - Homepage content (splash page) and other content,
    like an about page, privacy policy, etc. go here.

config/
  saas.yml - Some settings for the application, fairly
  self-explanatory.  This is generated by the bootstrap task or
  the generator.
  
You'll find the bulk of the recurring billing functionality located
in the vendor/plugins/saas directory:

app/
  models/
    saas_admin.rb - The model for Devise to use to authenticate
    users for the SaasAdmin controllers, which is what you will
    use (not your customers) to admin your SaaS app.
    
    subscription.rb - Here's where the magic happens: card
    storage, billing, plan changes, etc.
    
    The store_card method is used to authorize and store the
    credit card info with the gateway. If the account is still in
    the trial period, or is otherwise still current (been charged
    within the last month), the card will just be stored, and the
    next renewal date will be unchanged. Otherwise, the card will
    be charged for the amount that's currently due, and the next
    renewal date will be set to a month in the future.
    
    The charge method is used by the billing rake task to bill
    for the subscriptions on the renewal date.

  views/
    subscription_notifier/ - All the content for emails sent to
    account owners is here.
  
== Testing

If you'd like to run the included test suite, run 'rake spec'.
